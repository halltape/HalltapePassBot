from library import *
from func_pass import strong_pass
from period_time import period_result
from check_pass import check_pass, delete_most_popular
from func_pass import generate_password, check_corrected_pass
from func_pass import beautiful_password_first, beautiful_password_second
from func_pass import social_password, pass_corrector

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot('TOKEN')


# –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É /start
@bot.message_handler(commands=["start"])
# –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏
def start(m, res=False):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ö—Ä–∞—Å–∏–≤—ã–π –ø–∞—Ä–æ–ª—å\n(I –≤–∞—Ä–∏–∞–Ω—Ç)', '–ö—Ä–∞—Å–∏–≤—ã–π –ø–∞—Ä–æ–ª—å\n(II –≤–∞—Ä–∏–∞–Ω—Ç)')
    markup.row('–ü–∞—Ä–æ–ª—å –¥–ª—è —Å–æ—Ü —Å–µ—Ç–µ–π', '–û–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å')
    markup.row('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å')
    bot.send_message(m.chat.id, '\n\n*üîê –ü—Ä–æ–≤–µ—Ä—å –∏ —É—Å–ª–æ–∂–Ω–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å\\!\n'
                     '–û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –±–æ—Ç—É –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è*\n\n'
                     '*–õ–∏–±–æ –º–æ–∂–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ –≥–æ—Ç–æ–≤—ã–π\!*\n\n'
                     '1Ô∏è‚É£ –ö—Ä–∞—Å–∏–≤—ã–π –ø–∞—Ä–æ–ª—å\n'
                     '\n2Ô∏è‚É£ –ü–∞—Ä–æ–ª—å –¥–ª—è —Å–æ—Ü —Å–µ—Ç–µ–π\n'
                     '\n3Ô∏è‚É£ –û–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å',
                     reply_markup=markup, parse_mode='MarkdownV2')


# –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É /help
@bot.message_handler(commands=["help"])
def help(m, res=False):
    bot.send_message(m.chat.id, '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ '
                     '–ø–∏—Å–∞—Ç—å *@halltape*\n', parse_mode='MarkdownV2')


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é–∑–µ—Ä–∞
@bot.message_handler(content_types=["text"])
def handle_text(message):

    flag = True
    check_string = string.ascii_lowercase + string.ascii_uppercase + \
        string.punctuation + string.digits

    if message.text.strip() == '–ö—Ä–∞—Å–∏–≤—ã–π –ø–∞—Ä–æ–ª—å\n(I –≤–∞—Ä–∏–∞–Ω—Ç)':
        bot.send_message(message.chat.id,
                         f'{beautiful_password_first()}',)
    elif message.text.strip() == '–ö—Ä–∞—Å–∏–≤—ã–π –ø–∞—Ä–æ–ª—å\n(II –≤–∞—Ä–∏–∞–Ω—Ç)':
        bot.send_message(message.chat.id,
                         f'{beautiful_password_second()}',)
    elif message.text.strip() == '–ü–∞—Ä–æ–ª—å –¥–ª—è —Å–æ—Ü —Å–µ—Ç–µ–π':
        markup = telebot.types.ReplyKeyboardMarkup(True)
        markup.row('üó∫ Google', 'üìÆ Yandex', 'üìò Vk', 'üì¨ Mail')
        markup.row('üí¨ Facebook', 'üì∫ Avito', 'üì± Instagram')
        markup.row('üìÑ Gosuslugi', 'üÜì –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π')
        markup.row('üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
        bot.send_message(message.chat.id, '*–í—ã–±–µ—Ä–∏* –∫ —á–µ–º—É —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –ø–∞—Ä–æ–ª—å',
                         reply_markup=markup, parse_mode='MarkdownV2')

    elif message.text.strip() == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å':
        bot.send_message(message.chat.id, '*ü§ñ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è*',
                         parse_mode='MarkdownV2')

    elif message.text.strip() in ('üó∫ Google', 'üìÆ Yandex', 'üìò Vk', 'üì¨ Mail',
                                  'üí¨ Facebook', 'üì∫ Avito', 'üì± Instagram',
                                  'üìÑ Gosuslugi'):
        text_to_function = message.text.lower()
        bot.send_message(message.chat.id, social_password(text_to_function[2:]))

    elif message.text.strip() == 'üÜì –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π':
        bot.send_message(message.chat.id, social_password('*****'))

    elif message.text.strip() == 'üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('–ö—Ä–∞—Å–∏–≤—ã–π –ø–∞—Ä–æ–ª—å\n(I –≤–∞—Ä–∏–∞–Ω—Ç)', '–ö—Ä–∞—Å–∏–≤—ã–π –ø–∞—Ä–æ–ª—å\n(II –≤–∞—Ä–∏–∞–Ω—Ç)')
        markup.row('–ü–∞—Ä–æ–ª—å –¥–ª—è —Å–æ—Ü —Å–µ—Ç–µ–π', '–û–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å')
        markup.row('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å')
        bot.send_message(message.chat.id, 'üèù –¢—ã –≤ –º–µ–Ω—é', reply_markup=markup)

    elif message.text.strip() == '–û–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å':
        answer = strong_pass(False)
        bot.send_message(message.chat.id, '*'f'{answer}*',
                         parse_mode='MarkdownV2')
    else:
        for char in message.text.strip():
            if char not in (check_string):
                flag = False
        if flag:
            get_pass(message)
        else:
            bot.send_message(message.chat.id,
                             '‚ùå *–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã*\n'
                             '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç\n\n'
                             '\- –ï—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã\n'
                             '\- –ü–µ—Ä–µ–ø—É—Ç–∞–Ω–∞ —Ä—É—Å—Å–∫–∞—è *A* –∏ –ª–∞—Ç–∏–Ω—Å–∫–∞—è\n'
                             '\- –ï—Å—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã\n\n'
                             '*P\.S\. –ë–æ—Ç —Ä–∞–∑–ª–∏—á–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π –∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç*',
                             parse_mode='MarkdownV2')
    return 0


def get_pass(message: types.Message):   # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è

    attention = '‚ùå –¢–µ–±–µ –Ω—É–∂–Ω–æ —É—Å–∏–ª–∏—Ç—å —Ç–≤–æ–π –ø–∞—Ä–æ–ª—å!\n\n'
    good_attention = '‚úÖ –£ —Ç–µ–±—è —Ö–æ—Ä–æ—à–∏–π –ø–∞—Ä–æ–ª—å!\n'
    sun_attention = '\n‚è≥ –°–æ–ª–Ω—Ü–µ —É–∂–µ –ø–æ—Ç—É—Ö–Ω–µ—Ç, –∞ —Ç–≤–æ–π –ø–∞—Ä–æ–ª—å –≤—Å–µ –µ—â–µ –±—É–¥—É—Ç –ø–æ–¥–±–∏—Ä–∞—Ç—å\n'

    if len(message.text) <= 50:

        bit, time, unique, dict_answer = check_pass(message.text)
        verdict, time_final = '', ''

        # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–æ–º –∏ –ø–µ—Ä–∏–æ–¥–æ–º –≤—Ä–µ–º–µ–Ω–∏
        period = period_result(time)
        if dict_answer['digit'] is False:
            verdict += '‚ö†Ô∏è –ù–µ—Ç —Ü–∏—Ñ—Ä\n'
        if dict_answer['lower'] is False:
            verdict += '‚ö†Ô∏è –ù–µ—Ç –±—É–∫–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ\n'
        if dict_answer['upper'] is False:
            verdict += '‚ö†Ô∏è –ù–µ—Ç –±—É–∫–≤ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ\n'
        if dict_answer['special'] is False:
            verdict += '‚ö†Ô∏è –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤\n'
        if dict_answer['length'] < 16:
            verdict += '‚ö†Ô∏è –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –º–µ–Ω—å—à–µ 16 —Å–∏–º–≤–æ–ª–æ–≤\n'
        if dict_answer['duplicates'][0] is True:
            verdict += '‚ö†Ô∏è –ë–æ–ª—å—à–µ —á–µ—Ç—ã—Ä–µ—Ö —á–∏—Å–µ–ª –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º\n'
        if dict_answer['duplicates'][1] is True:
            verdict += '‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã\n'
        if unique < 0.6:
            verdict += '‚ö†Ô∏è –ú–∞–ª–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è\n'

        if (time // 3600 // 24) < 183:
            if time < 1:  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –º—Å–∫
                time_final = '\n‚è≥ –ü–∞—Ä–æ–ª—å –≤–∑–ª–æ–º–∞—é—Ç –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ\n'
            else:
                time_final = '\n‚è≥ –ù–∞ –µ–≥–æ –≤–∑–ª–æ–º —É–π–¥–µ—Ç 'f'{period}\n'

        bit_final = '\n–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è 'f'{round(bit / 97 * 100)} %'

        if verdict != '' and bit < 97:
            if dict_answer['length'] < 16 \
                    and (time // 3600 // 24 // 365) > 1 and unique > 0.5:
                verdict_final = good_attention
                if period is True:
                    time_final = sun_attention
                else:
                    time_final = '\n‚è≥ –ù–∞ –µ–≥–æ –≤–∑–ª–æ–º —É–π–¥–µ—Ç 'f'{period}\n'
                verdict_final += time_final
            else:
                verdict_final = attention + verdict + time_final + bit_final

        if bit > 96 and unique > 0.6 and dict_answer['duplicates'][0] is False\
                and dict_answer['duplicates'][1] is False:
            if period is True:
                time_final = sun_attention
            else:
                time_final = '\n–ù–∞ –µ–≥–æ –≤–∑–ª–æ–º —É–π–¥–µ—Ç 'f'{time}\n'
            verdict_final = good_attention + time_final
        else:
            if bit > 96:
                bit_final = ''
                verdict_final = attention + verdict + time_final + bit_final
    else:
        verdict_final = '‚ôæ –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –≤ —ç—Ç–æ–º –Ω–µ—Ç —Å–º—ã—Å–ª–∞'

    bot.send_message(message.chat.id, verdict_final)

    if verdict_final[0] == '‚ùå':
        # –∏–Ω–ª–∞–π–Ω–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        inMurkup = types.InlineKeyboardMarkup(row_width=1)
        inline_button = types.InlineKeyboardButton('üí™üèª –£—Å–ª–æ–∂–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å',
                                                   callback_data=message.text)
        inMurkup.add(inline_button)
        bot.send_message(message.chat.id,
                         '*–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É*, —á—Ç–æ–±—ã —É—Å–ª–æ–∂–Ω–∏—Ç—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å\n' +
                         12 * '\t' + '*–ñ–º–∏ —Å–∫–æ–ª—å–∫–æ –≤–ª–µ–∑–µ—Ç\\!*',
                         parse_mode='MarkdownV2', reply_markup=inMurkup)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    corrected_password = pass_corrector(call.data)
    bot.send_message(call.message.chat.id, corrected_password)


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling(none_stop=True, interval=0)

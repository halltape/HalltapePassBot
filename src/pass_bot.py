import telebot
from telebot import types
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup
from telebot.types import InlineKeyboardButton
import random
import math
import sys
import string
from functools import reduce


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot('TOKEN')


# –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É /start
@bot.message_handler(commands=["start"])
# –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏
def start(m, res=False):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å')
    button2 = types.KeyboardButton('–¢–æ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å')
    markup.add(button1)
    markup.add(button2)
    bot.send_message(m.chat.id, '\n\n*üîê –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –Ω–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, '
                     '–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –±–æ—Ç—É –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è*\n\n'
                     'üí™üèª –¢–∞–∫–∂–µ –±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å–∏–ª–∏—Ç—å —Ç–≤–æ–π –ø–∞—Ä–æ–ª—å\n\n'
                     '*–õ–∏–±–æ –º–æ–∂–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ –≥–æ—Ç–æ–≤—ã–π\!*\n\n'
                     '1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å \(*18 —Å–∏–º–≤–æ–ª–æ–≤*\)\n'
                     '–ú–æ–∂–µ—à—å –Ω–∞–∂–∏–º–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª\-–≤–æ —Ä–∞–∑\n'
                     '\n2Ô∏è‚É£ –¢–æ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å \(*95 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤*\)\n',
                     reply_markup=markup, parse_mode='MarkdownV2')


# –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É /help
@bot.message_handler(commands=["help"])
def help(m, res=False):
    bot.send_message(m.chat.id, '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ '
                     '–ø–∏—Å–∞—Ç—å *@halltape*\n', parse_mode='MarkdownV2')


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é–∑–µ—Ä–∞
@bot.message_handler(content_types=["text"])
def handle_text(message):

    flag = True
    check_string = string.ascii_lowercase + string.ascii_uppercase + \
        string.punctuation + string.digits

    if message.text.strip() == '–¢–æ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å':
        answer = strong_pass(True)
        bot.send_message(message.chat.id, answer)
    elif message.text.strip() == '–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å':
        answer = strong_pass(False)
        bot.send_message(message.chat.id, '*'f'{answer}*',
                         parse_mode='MarkdownV2')
    else:
        for char in message.text.strip():
            if char not in (check_string):
                flag = False
        if flag:
            get_pass(message)
        else:
            bot.send_message(message.chat.id,
                             '‚ùå *–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã*\n'
                             '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç\n\n'
                             '\- –ï—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã\n'
                             '\- –ü–µ—Ä–µ–ø—É—Ç–∞–Ω–∞ —Ä—É—Å—Å–∫–∞—è *A* –∏ –ª–∞—Ç–∏–Ω—Å–∫–∞—è\n'
                             '\- –ï—Å—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã\n\n'
                             '*P\.S\. –ë–æ—Ç —Ä–∞–∑–ª–∏—á–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π –∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç*',
                             parse_mode='MarkdownV2')


def get_pass(message: types.Message):   # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
    if len(message.text) <= 50:
        bit, time, unique, dict_answer = check_pass(message.text)
        verdict, time_final = '', ''
        # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–æ–º –∏ –ø–µ—Ä–∏–æ–¥–æ–º –≤—Ä–µ–º–µ–Ω–∏
        period = period_result(time)
        if dict_answer['digit'] is False:
            verdict += '‚ö†Ô∏è –ù–µ—Ç —Ü–∏—Ñ—Ä\n'
        if dict_answer['lower'] is False:
            verdict += '‚ö†Ô∏è –ù–µ—Ç –±—É–∫–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ\n'
        if dict_answer['upper'] is False:
            verdict += '‚ö†Ô∏è –ù–µ—Ç –±—É–∫–≤ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ\n'
        if dict_answer['special'] is False:
            verdict += '‚ö†Ô∏è –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤\n'
        if dict_answer['length'] < 16:
            verdict += '‚ö†Ô∏è –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –º–µ–Ω—å—à–µ 16 —Å–∏–º–≤–æ–ª–æ–≤\n'
        if dict_answer['duplicates'][0] is True:
            verdict += '‚ö†Ô∏è –ë–æ–ª—å—à–µ —á–µ—Ç—ã—Ä–µ—Ö —á–∏—Å–µ–ª –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º\n'
        if dict_answer['duplicates'][1] is True:
            verdict += '‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã\n'
        if unique < 0.6:
            verdict += '‚ö†Ô∏è –ú–∞–ª–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è\n'

        if (time // 3600 // 24) < 183:
            if time < 1:  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –º—Å–∫
                time_final = '\n‚è≥ –ü–∞—Ä–æ–ª—å –≤–∑–ª–æ–º–∞—é—Ç –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ\n'
            else:
                time_final = '\n‚è≥ –ù–∞ –µ–≥–æ –≤–∑–ª–æ–º —É–π–¥–µ—Ç 'f'{period}\n'

        bit_final = '\n–°–∏–ª–∞ –ø–∞—Ä–æ–ª—è 'f'{bit} –±–∏—Ç\n–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ' \
            '–æ—Ç 97 –∏ –±–æ–ª—å—à–µ'
        if verdict != '' and bit < 97:
            if dict_answer['length'] < 16 \
                    and (time // 3600 // 24 // 365) > 1 and unique > 0.5:
                verdict_final = '‚Ñπ –ü–∞—Ä–æ–ª—å –Ω–∞–¥–µ–∂–Ω—ã–π,' \
                    ' –Ω–æ –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∏–∂–µ'
                if period is True:
                    time_final = '\n‚è≥ –°–æ–ª–Ω—Ü–µ —É–∂–µ –ø–æ—Ç—É—Ö–Ω–µ—Ç, '\
                        '–∞ —Ç–≤–æ–π –ø–∞—Ä–æ–ª—å –≤—Å–µ –µ—â–µ –±—É–¥—É—Ç –ø–æ–¥–±–∏—Ä–∞—Ç—å\n'
                else:
                    time_final = '\n‚è≥ –ù–∞ –µ–≥–æ –≤–∑–ª–æ–º —É–π–¥–µ—Ç 'f'{period}\n'
                verdict_final += '\n\n' + verdict + time_final + bit_final
            else:
                verdict_final = '‚ùå –¢–µ–±–µ –Ω—É–∂–Ω–æ —É—Å–∏–ª–∏—Ç—å —Ç–≤–æ–π –ø–∞—Ä–æ–ª—å!\n\n' \
                    + verdict + time_final + bit_final
        if bit > 96 and unique > 0.6 and dict_answer['duplicates'][0] is False\
                and dict_answer['duplicates'][1] is False:
            if period is True:
                time_final = '\n‚è≥ –°–æ–ª–Ω—Ü–µ —É–∂–µ –ø–æ—Ç—É—Ö–Ω–µ—Ç, '\
                    '–∞ —Ç–≤–æ–π –ø–∞—Ä–æ–ª—å –≤—Å–µ –µ—â–µ –±—É–¥—É—Ç –ø–æ–¥–±–∏—Ä–∞—Ç—å\n'
            else:
                time_final = '\n–ù–∞ –µ–≥–æ –≤–∑–ª–æ–º —É–π–¥–µ—Ç 'f'{time}\n'
            verdict_final = '‚úÖ –£ —Ç–µ–±—è —Ö–æ—Ä–æ—à–∏–π –ø–∞—Ä–æ–ª—å!\n' \
                + time_final + bit_final
        else:
            if bit > 96:
                bit_final = ''
                verdict_final = '‚ùå –¢–µ–±–µ –Ω—É–∂–Ω–æ —É—Å–∏–ª–∏—Ç—å —Ç–≤–æ–π –ø–∞—Ä–æ–ª—å!\n\n' \
                    + verdict + time_final + bit_final
    else:
        verdict_final = '‚ôæ –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –≤ —ç—Ç–æ–º –Ω–µ—Ç —Å–º—ã—Å–ª–∞'

    bot.send_message(message.chat.id, verdict_final)
    if verdict_final[0] == '‚ùå':
        # –∏–Ω–ª–∞–π–Ω–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        inMurkup = types.InlineKeyboardMarkup(row_width=1)
        inline_button1 = types.InlineKeyboardButton('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è ' \
                                                    '–∑–∞—â–∏—Ç–∞ (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)', callback_data='1' + "|" + message.text)
        inline_button2 = types.InlineKeyboardButton('–ù–µ–º–Ω–æ–≥–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å',
                                                   callback_data='2' + "|" + message.text)
        inMurkup.add(inline_button1)
        inMurkup.add(inline_button2)
        bot.send_message(message.chat.id, '–¢—ã –º–æ–∂–µ—à—å —É—Å–∏–ª–∏—Ç—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å',
                         reply_markup=inMurkup)

    if verdict_final[0] == '‚Ñπ':
        # –∏–Ω–ª–∞–π–Ω–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        inMurkup = types.InlineKeyboardMarkup(row_width=1)
        inline_button3 = types.InlineKeyboardButton('–ù–µ–º–Ω–æ–≥–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å',
                                                   callback_data='3' + "|" + message.text)
        inMurkup.add(inline_button3)
        bot.send_message(message.chat.id, '–¢—ã –º–æ–∂–µ—à—å —É—Å–∏–ª–∏—Ç—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å',
                         reply_markup=inMurkup)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    import string
    check_string = string.ascii_lowercase + string.ascii_uppercase + string.punctuation + string.digits
    call_back_pass = call.data[2:]
    if call.data[0] == '1':  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ
        # –ò–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —Å—Ç—Ä–æ–∫—É
        s = ''.join(set(call_back_pass))
        corrected_pass = s + strong_pass(False)

        # shuffle corrected_pass
        corrected_pass = ''.join(random.sample(corrected_pass,
                                               len(corrected_pass)))
        digits, letters = check_corrected_pass(corrected_pass)
        unique = len(set(corrected_pass)) / len(corrected_pass)

        # –ü–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Ü–∏—Ñ—Ä
        while digits is not False and letters is not False:
            corrected_pass = s + strong_pass(False)
            corrected_pass = ''.join(random.sample(corrected_pass,
                                                   len(corrected_pass)))
            digits, letters = check_corrected_pass(corrected_pass)
            unique = len(set(corrected_pass)) / len(corrected_pass)

        bot.send_message(call.message.chat.id, f'{corrected_pass[:18]}')
    elif call.data[0] in ('2', '3'):
        bit, time, unique, dict_answer = check_pass(call_back_pass)
        while (len(call_back_pass) <= len(call.data[2:])):
            if dict_answer['duplicates'][1] is True:
                call_back_pass = delete_most_popular(call_back_pass, check_string)
            if dict_answer['digit'] is False:
                call_back_pass += random.choice(string.digits)
            if dict_answer['lower'] is False:
                call_back_pass += random.choice(string.ascii_lowercase)
            if dict_answer['upper'] is False:
                call_back_pass += random.choice(string.ascii_uppercase)
            if dict_answer['special'] is False:
                call_back_pass += random.choice('!#$%&()*+-:;=>?@_')
            if call_back_pass == call.data[2:]:
                dict = {'digit': True, 'lower': True, 'upper': True,
                        'special': True, 'replace': False}
                call_back_pass += generate_password(dict)
                break
        # shuffle corrected_pass
        call_back_pass = ''.join(random.sample(call_back_pass,
                                               len(call_back_pass)))
        bot.send_message(call.message.chat.id, call_back_pass)
    return 0


# Function that delete the most popular symbol in the string
def delete_most_popular(string, check_string):
    most_popular = max(string, key=string.count)
    string = string.replace(most_popular, '')
    string += random.choice(check_string)
    return string


def check_pass(password):
    total, count, summ = 0, 0, 0
    dictionary = {'digit': False, 'lower': False,
                  'upper': False, 'special': False,
                  'length': len(password), 'duplicates': [False, False]}
    if any(c.isdigit() for c in password):
        total += 10
        dictionary['digit'] = True
    if any(c in string.ascii_lowercase for c in password):
        total += 26
        dictionary['lower'] = True
    if any(c in string.ascii_uppercase for c in password):
        total += 26
        dictionary['upper'] = True
    if any(c in string.punctuation for c in password):
        total += 33
        dictionary['special'] = True

# –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —Ü–∏—Ñ—Ä
    for c in password:
        if c in ('1234567890'):
            count += 1
            if count > 4:
                dictionary['duplicates'][0] = True
        else:
            count = 0

#  –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    for i in range(1, len(password)):
        if password[i] == password[i - 1]:
            summ += 1
            if summ > 2:
                dictionary['duplicates'][1] = True
        else:
            summ = 0

    entropy = round(math.log2(total**len(password)))  # –≠–Ω—Ç—Ä–æ–ø–∏—è
    if sys.float_info.max > total**len(password):
        # –í—Ä–µ–º—è –ø–æ–¥–±–æ—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        time_seconds = (round(total**len(password) / 3900000000))
    metric_unique = len(set(password)) / len(password)
    return entropy, time_seconds, metric_unique, dictionary


def check_corrected_pass(correct_pass) -> tuple[bool, bool]:
    count, summ, duplicates_digits, duplicates_letters = 0, 0, False, False
    # –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —Ü–∏—Ñ—Ä
    for c in correct_pass:
        if c in ('1234567890'):
            count += 1
            if count > 4:
                duplicates_digits = True
        else:
            count = 0

#  –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    for i in range(1, len(correct_pass)):
        if correct_pass[i] == correct_pass[i - 1]:
            summ += 1
            if summ > 2:
                duplicates_letters = True
        else:
            summ = 0
    return duplicates_digits, duplicates_letters


def generate_password(dict) -> str:
    # –ü–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É —Å–ª–æ–≤–∞—Ä—é –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º sample
    # –ø–∞—Ä–æ–ª—è –∏–∑ –º–∞–∫—Å–∏–º—É–º 4 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –ø–∏—à–µ–º –≤ —Å—Ç—Ä–æ–∫—É
    sample_password = ''
    if dict['digit'] is True:
        sample_password += random.choice(string.digits)
    if dict['lower'] is True:
        sample_password += random.choice(string.ascii_lowercase)
    if dict['upper'] is True:
        sample_password += random.choice(string.ascii_uppercase)
    if dict['special'] is True:
        sample_password += random.choice(string.punctuation)
    if dict['replace'] is True:
        sample_password = sample_password.replace('i', 'F').replace('l', 'g') \
            .replace('1', 'p').replace('L', '7').replace('o', 't') \
            .replace('0', '2').replace('O', 'z')
    return sample_password


def final_pass(answ_dict, length) -> str:
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ —Å—ç–º–ø–ª–æ–≤ (–∫–∞–∂–¥—ã–π –∏–∑ 4 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    build_password = ''  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Å—ç–º–ø–ª–∞
    if length == 95:
        build_password = string.digits + string.ascii_lowercase + \
            string.ascii_uppercase + string.punctuation
        # –û–±—Ä–µ–∑–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
        final_password = list(build_password[:95])
        random.shuffle(final_password)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        final_password = ''.join(final_password)  # –°–∫–ª–µ–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
    else:
        # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å, –ø–æ–∫–∞ –¥–ª–∏–Ω–∞ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –Ω—É–∂–Ω—É—é
        while len(build_password) <= length:
            # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –±—É–¥–µ—Ç n, —Ç–æ —Å—ç–º–ø–ª —Å–æ–±–µ—Ä–∞–µ—Ç—Å—è –¥–ª–∏–Ω–æ–π n + 1
            for _ in range(math.ceil(length / 4)):
                # –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ —Å—ç–º–ø–ª–æ–≤ –ø–∞—Ä–æ–ª—è
                build_password += generate_password(answ_dict)
        # –û–±—Ä–µ–∑–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
        final_password = list(build_password[:length])
        random.shuffle(final_password)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        final_password = ''.join(final_password)  # –°–∫–ª–µ–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
    return final_password


def strong_pass(button):
    if button is True:
        pass_length = 95
        answer_dict = {'digit': True, 'lower': True, 'upper': True,
                       'special': True, 'replace': False}
    else:
        pass_length = 18
        answer_dict = {'digit': True, 'lower': True, 'upper': True,
                       'special': False, 'replace': True}
    password = final_pass(answer_dict, pass_length)
    digits, letters = check_corrected_pass(password)
    while digits is not False and letters is not False:
        password = final_pass(answer_dict, pass_length)
    return password


def period_result(period):
    dict_period = {'seconds': '—Å–µ–∫—É–Ω–¥',
                   'minutes': '–º–∏–Ω—É—Ç',
                   'hours': '—á–∞—Å',
                   'days': '–¥',
                   'years': '',
                   'century': '–≤–µ–∫'}

    dict_ends = {'seconds': ['', '–∞', '—ã'],
                 'minutes': ['', '–∞', '—ã'],
                 'hours': ['–æ–≤', '', '–∞'],
                 'days': ['–Ω–µ–π', '–µ–Ω—å', '–Ω—è'],
                 'years': ['–ª–µ—Ç', '–≥–æ–¥', '–≥–æ–¥–∞'],
                 'century': ['–æ–≤', '', '–∞']}

    if period // 3600 // 24 // 365 // 100 > 60000000:
        result = True
        return result
    if period < 60:
        word = dict_period['seconds']
    elif 60 <= period < 3600:
        word = dict_period['minutes']
        period = period // 60  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
    elif 3600 <= period < (24 * 3600):
        word = dict_period['hours']
        period = period // 3600  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
    elif 24 * 3600 <= period < (24 * 3600) * 365:
        word = dict_period['days']
        period = period // 3600 // 24  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    elif ((24 * 3600) * 365) <= period < ((24 * 3600) * 365 * 100):
        word = dict_period['years']
        period = period // 3600 // 24 // 365  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç
    elif period >= ((24 * 3600) * 365 * 100):
        word = dict_period['century']
        period = period // 3600 // 24 // 365 // 100  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–∫–æ–≤
    # 15
    if int(period) % 10 in (0, 5, 6, 7, 8, 9) or int(period) in range(11, 20):
        if word == dict_period['seconds']:
            word += dict_ends['seconds'][0]

        if word == dict_period['minutes']:
            word += dict_ends['minutes'][0]

        if word == dict_period['hours']:
            word += dict_ends['hours'][0]

        if word == dict_period['days']:
            word += dict_ends['days'][0]

        if word == dict_period['years']:
            word += dict_ends['years'][0]

        if word == dict_period['century']:
            word += dict_ends['century'][0]

    elif int(period) % 10 == 1 and int(period) not in range(11, 20):  # 1
        if word == dict_period['seconds']:
            word += dict_ends['seconds'][1]

        if word == dict_period['minutes']:
            word += dict_ends['minutes'][1]

        if word == dict_period['hours']:
            word += dict_ends['hours'][1]

        if word == dict_period['days']:
            word += dict_ends['days'][1]

        if word == dict_period['years']:
            word += dict_ends['years'][1]

        if word == dict_period['century']:
            word += dict_ends['century'][1]

    elif int(period) % 10 in (2, 3, 4):  # 4
        if word == dict_period['seconds']:
            word += dict_ends['seconds'][2]

        if word == dict_period['minutes']:
            word += dict_ends['minutes'][2]

        if word == dict_period['hours']:
            word += dict_ends['hours'][2]

        if word == dict_period['days']:
            word += dict_ends['days'][2]

        if word == dict_period['years']:
            word += dict_ends['years'][2]

        if word == dict_period['century']:
            word += dict_ends['century'][2]
    result = str(f'{period:,}') + ' ' + word
    return result


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling(none_stop=True, interval=0)
